<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Campus Cart</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.15/dist/tailwind.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="./output.css">
  <style>
    /* Background: professional gradient */
    body {
      background: linear-gradient(135deg, #f8fafc, #e2e8f0);
    }



    /* Custom styles to make dropdown above content */
    #navbarMenu {
      z-index: 9999;
      position: absolute;
      top: 80px;
      /* Adjust based on the height of your header */
      left: 0;
      width: 100%;
    }

    .p-4 {
      padding: auto;
    }

    .imgclass {
      height: 30%;
      width: 70%;
    }

    @media only screen and (max-width: 768px) {
      .imgclass {
        height: 6rem;
        width: 10rem;
      }
    }

    /* Hide title on small screens but keep logo */
    @media only screen and (max-width: 500px) {
      #logo-title {
        display: none;
      }

      #logo-icon {
        width: 40px;
        /* Resize logo icon on small screens */
      }

      #hamburger-menu {
        display: block;
      }

      .p-4 {
        padding: 1.5rem !important;
      }
    }

    /* Adding some colorful styles for links and buttons */
    a:hover,
    button:hover {
      filter: brightness(0.9);
      transition: all 0.2s ease-in-out;
    }

    .container a:hover {
      filter: none;
    }

    .container a {
      text-decoration: none;
    }

    /* Enhance header with a subtle shadow and border color */
    header {
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      border-bottom: 1px solid #e2e8f0;
    }

    #productDetail {
      width: 80%;
      height: 80%;
      inset: 0;
      margin: auto;
      position: fixed;
      background: linear-gradient(135deg, #f8fafc, #e2e8f0);
      /* background-color: rgb(111, 237, 100);  */
    }

    #sectioninsection {
      position: absolute;
      top: 33px;
      left: 106px;
    }
  </style>
</head>

<body>
  <header class="text-gray-600 body-font fixed w-full bg-white" style="top: 0;">
    <div class="container mx-auto flex flex-wrap p-5 flex-row items-center justify-between">

      <!-- Logo (Icon + Title) -->
      <a id="logo-title" class="flex title-font font-medium items-center text-gray-900 mb-4 md:mb-0">
        <svg id="logo-icon" xmlns="http://www.w3.org/2000/svg" fill="none" stroke="currentColor" stroke-linecap="round"
          stroke-linejoin="round" stroke-width="2" class="w-10 h-10 text-white p-2 bg-indigo-500 rounded-full"
          viewBox="0 0 24 24">
          <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"></path>
        </svg>
        <span class="ml-3 text-xl hidden md:inline">Campus Cart</span>
      </a>

      <!-- Hamburger Menu Icon (Visible only on small screens) -->
      <button id="hamburger-menu"
        class="lg:hidden inline-flex items-center bg-gray-100 p-2 rounded-md text-gray-500 hover:text-gray-900 hover:bg-gray-200">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"
          stroke-width="2" viewBox="0 0 24 24">
          <path d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>

      <!-- Search Bar (Toggle on Mobile) -->
      <div id="search-bar-container" class="hidden lg:block relative w-[30%] md:w-[40%]" style="width: 40%;">
        <input type="search" id="default-search"
          class="block w-full p-4 pl-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500"
          placeholder="Search here" />
        <button type="submit"
          class="absolute right-2.5 bottom-2.5 text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2">
          Search
        </button>
      </div>

      <!-- Navigation Links (Desktop) -->
      <div class="hidden lg:flex space-x-4 items-center">
        <!-- Sell Button -->
        <button id="sellbutton" action="/sellitem"
          class="inline-flex items-center bg-gray-100 border-0 py-1 px-3 focus:outline-none hover:bg-gray-200 rounded text-base">
          <svg fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
            class="w-4 h-4 ml-1" viewBox="0 0 24 24">
            <path d="M5 12h14M12 5l7 7-7 7"></path>
          </svg>&nbsp;Sell
        </button>

        <!-- Profile Icon -->
        <button id="profile-button"
          class="inline-flex items-center bg-gray-100 border-0 py-1 px-3 focus:outline-none hover:bg-gray-200 rounded text-base">
          <svg fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
            class="w-4 h-4 ml-1" viewBox="0 0 24 24">
            <path
              d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z">
            </path>
          </svg>&nbsp;Profile
        </button>
      </div>
    </div>

    <!-- Collapsible Menu (Mobile) -->
    <div id="navbarMenu" class="lg:hidden hidden flex-col items-center w-full mt-4 bg-white border-t border-gray-200">
      <button id="selldownbutton" action="/sellitem"
        class="w-full text-center bg-gray-100 border-0 py-2 px-4 focus:outline-none hover:bg-gray-200 rounded text-base">
        Sell
      </button>
      <button id="profiledown-button"
        class="w-full text-center bg-gray-100 border-0 py-2 px-4 focus:outline-none hover:bg-gray-200 rounded text-base">
        Profile
      </button>
      <!-- Mobile Search Icon -->
      <button id="search-toggle"
        class="w-full text-center bg-gray-100 border-0 py-2 px-4 focus:outline-none hover:bg-gray-200 rounded text-base">
        Search
      </button>
    </div>
  </header>
  <section id="productDetail" class="text-gray-600 body-font overflow-hidden hidden">
    <div class="container px-5 py-24 mx-auto">
      <div id="sectioninsection" class="lg:w-4/5 mx-auto flex flex-wrap">
        <button id="closeDetail"
          class="absolute top-2 right-2 text-gray-600 hover:text-gray-900 hover:bg-gray-500">Close</button>
        <img id="detailPhoto" alt="ecommerce" class="lg:w-1/2 lg:h-auto h-64 object-cover object-center rounded w-[40%]"
          style="width: 40%;" src="">
        <div class="lg:w-1/2 w-full lg:pl-10 lg:py-6 mt-6 lg:mt-0">
          <h1 id="detailName" class="text-gray-900 text-3xl title-font font-medium mb-1">The Catcher in the Rye</h1>
          <h2 id="detailCategory" class="text-sm title-font text-gray-500 tracking-widest"></h2>
          <p id="detailDesc" class="leading-relaxed">Fam locavore kickstarter distillery. Mixtape chillwave tumeric
            sriracha taximy chia microdosing tilde DIY. XOXO fam indxgo juiceramps cornhole raw denim forage brooklyn.
            Everyday carry +1 seitan poutine tumeric. Gastropub blue bottle austin listicle pour-over, neutra jean
            shorts keytar banjo tattooed umami cardigan.</p>
          <p id="detailPostedBy" class="text-sm text-gray-800"></p>
          <div class="flex">
            <span id="detailPrice" class="title-font font-medium text-2xl text-gray-900">(price)</span>
            <button
              class="flex ml-auto text-white bg-indigo-500 border-0 py-2 px-6 focus:outline-none hover:bg-indigo-600 rounded">Contact</button>
          </div>
        </div>
      </div>
    </div>
  </section>

  <section class="text-gray-600 body-font">
    <div class="container mx-auto mt-10">
      <h1 class="text-3xl font-bold text-center">Campus Cart</h1>

      <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-[2.5rem]" style="margin-top: 8rem;">

        <% items.slice().reverse().forEach(item=> { %>
          <div class="item-card bg-white p-4 rounded-lg shadow-md cursor-pointer" data-name="<%= item.item_name %>"
            data-desc="<%= item.item_desc %>" data-price="<%= item.item_price %>"
            data-category="<%= item.item_category %>" data-photo="/uploads/<%= item.item_photo.split('\\').pop() %>"
            data-username="<%= item.postedby ? item.postedby.username : 'Unknown' %>">
            <a href="#">
              <img src="/uploads/<%= item.item_photo.split('\\').pop() %>" alt="<%= item.item_name %>"
                class="w-full h-40 rounded-md object-contain">
              <h2 class="text-xl font-semibold mt-2">
                <%= item.item_name %>
              </h2>
              <p class="text-gray-700">
                <%= item.item_desc %>
              </p>
              <p class="text-green-600 font-bold">â‚¹<%= item.item_price %>
              </p>
              <p class="text-gray-500">Category: <%= item.item_category %>
              </p>
              <p class="text-sm text-gray-400">Posted by: <%= item.postedby ? item.postedby.username : "Unknown" %>
              </p>
            </a>
          </div>
        <% }); %>
        
      </div>
    </div>

  </section>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      // Get all item cards and the detail section elements
      const itemCards = document.querySelectorAll(".item-card");
      const productDetailSection = document.getElementById("productDetail");
      const detailName = document.getElementById("detailName");
      const detailDesc = document.getElementById("detailDesc");
      const detailPrice = document.getElementById("detailPrice");
      const detailCategory = document.getElementById("detailCategory");
      const detailPhoto = document.getElementById("detailPhoto");
      const detailPostedBy = document.getElementById("detailPostedBy");
      const closeDetailButton = document.getElementById("closeDetail");

      // Loop through each item card and add a click event listener
      itemCards.forEach(card => {
        card.addEventListener("click", function (event) {
          event.preventDefault();
          // Read data attributes from the clicked card
          const name = card.getAttribute("data-name");
          const desc = card.getAttribute("data-desc");
          const price = card.getAttribute("data-price");
          const category = card.getAttribute("data-category");
          const photo = card.getAttribute("data-photo");
          const username = card.getAttribute("data-username");

          // Update the detail section with these values
          detailName.textContent = name;
          detailDesc.textContent = desc;
          detailPrice.textContent = "â‚¹" + price;
          detailCategory.textContent = category;
          detailPhoto.src = photo;
          detailPostedBy.textContent = "Posted by: " + username;

          // Reveal the detail section (remove hidden class)
          productDetailSection.classList.remove("hidden");
        });
      });

      // Add a click event listener to the close button to hide the detail section
      closeDetailButton.addEventListener("click", function () {
        productDetailSection.classList.add("hidden");
      });
    });

    document.addEventListener("DOMContentLoaded", function () {
      const profileButton = document.getElementById("profile-button");
      profileButton.addEventListener("click", function (event) {
        event.preventDefault();
        // Optionally perform additional logic here
        window.location.href = "/profile";
      });
    });
    document.addEventListener("DOMContentLoaded", function () {
      const profileButton = document.getElementById("profiledown-button");
      profileButton.addEventListener("click", function (event) {
        event.preventDefault();
        // Optionally perform additional logic here
        window.location.href = "/profile";
      });
    });
  </script>

  <script>
    document.addEventListener("DOMContentLoaded", function () {


      // Toggle the menu on mobile
      const hamburgerMenu = document.getElementById('hamburger-menu');
      const navbarMenu = document.getElementById('navbarMenu');

      hamburgerMenu.addEventListener('click', () => {
        navbarMenu.classList.toggle('hidden');
      });

      // Toggle search bar visibility on mobile
      const searchToggle = document.getElementById('search-toggle');
      const searchBarContainer = document.getElementById('search-bar-container');

      searchToggle.addEventListener('click', () => {
        searchBarContainer.classList.toggle('hidden');
      });


      document.querySelector("#sellbutton").addEventListener('click', function (event) {
        event.preventDefault(); // Prevent default behavior if in a form

        const sendreq = async () => {
          await fetch("/sellitem", {
            method: "POST",
            headers: {
              "Content-Type": "application/json", // Ensure correct content type for JSON
            },
            body: JSON.stringify({ /* Add any data you need to send */ })
          })
            .then((response) => {
              if (!response.ok) {
                throw new Error("Server error");
              }
              return response.json();
            })
            .then((data) => {
              // console.log(data); // Handle the response from the server
              window.location.href = data.redirectUrl;
            })
            .catch((error) => {
              console.error("Error:", error); // Log errors
            });
        };

        sendreq(); // Call the function to send the request
      });

      document.querySelector("#selldownbutton").addEventListener('click', function (event) {
        event.preventDefault(); // Prevent default behavior if in a form

        const sendreq = async () => {
          await fetch("/sellitem", {
            method: "POST",
            headers: {
              "Content-Type": "application/json", // Ensure correct content type for JSON
            },
            body: JSON.stringify({ /* Add any data you need to send */ })
          })
            .then((response) => {
              if (!response.ok) {
                throw new Error("Server error");
              }
              return response.json();
            })
            .then((data) => {
              // console.log(data); // Handle the response from the server
              window.location.href = data.redirectUrl;
            })
            .catch((error) => {
              console.error("Error:", error); // Log errors
            });
        };

        sendreq(); // Call the function to send the request
      });
    });
  </script>
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const searchInput = document.getElementById("default-search");
      const searchButton = searchInput.nextElementSibling; // assuming the search button is the next sibling
      const itemCards = document.querySelectorAll(".item-card");
  
      // Function to filter cards based on search term
      function filterItems() {
        const searchTerm = searchInput.value.toLowerCase();
        itemCards.forEach(card => {
          // You can search within the item's name, description, or any data attribute
          const name = card.getAttribute("data-name").toLowerCase();
          const desc = card.getAttribute("data-desc").toLowerCase();
          // Check if the search term exists in the name or description
          if (name.includes(searchTerm) || desc.includes(searchTerm)) {
            card.style.display = "block"; // or use an empty string if you have CSS handling layout
          } else {
            card.style.display = "none";
          }
        });
      }
  
      // Trigger filtering when typing in the search box
      searchInput.addEventListener("input", filterItems);
  
      // Or, if you prefer to filter when the search button is clicked:
      searchButton.addEventListener("click", function(event) {
        event.preventDefault();
        filterItems();
      });
    });
  </script>
    
</body>

</html>